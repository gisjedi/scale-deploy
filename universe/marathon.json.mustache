{
  "id": "{{service.name}}",
  "cpus": 1.0,
  "mem": 1024,
  "instances": 1,
  "cmd": "export LD_LIBRARY_PATH=$MESOS_SANDBOX/libmesos-bundle/lib:$LD_LIBRARY_PATH; export MESOS_NATIVE_JAVA_LIBRARY=$(ls $MESOS_SANDBOX/libmesos-bundle/lib/libmesos-*.so); export JAVA_HOME=$(ls -d $MESOS_SANDBOX/jre*/); export JAVA_HOME=${JAVA_HOME%/}; export PATH=$(ls -d $JAVA_HOME/bin):$PATH &&  export JAVA_OPTS=\"-Xms256M -Xmx512M -XX:-HeapDumpOnOutOfMemoryError\" &&  ./scale-scheduler/bin/scale ./scale-scheduler/svc.yml",
  "labels": {
    "DCOS_COMMONS_API_VERSION": "v1",
    "DCOS_COMMONS_UNINSTALL": "true",
    "DCOS_PACKAGE_FRAMEWORK_NAME": "{{service.name}}",
    "MARATHON_SINGLE_INSTANCE_APP": "true",
    "DCOS_SERVICE_NAME": "{{service.name}}",
    "DCOS_SERVICE_PORT_INDEX": "0",
    "DCOS_SERVICE_SCHEME": "http"
  },
  {{#service.service_account_secret}}
  "secrets": {
    "serviceCredential": {
      "source": "{{service.service_account_secret}}"
    }
  },
  {{/service.service_account_secret}}
  "env": {
    "FRAMEWORK_NAME": "{{service.name}}",
    "SLEEP_DURATION": "{{service.sleep}}",
    "FRAMEWORK_USER": "{{service.user}}",
    "FRAMEWORK_PRINCIPAL": "{{service.service_account}}",
    "FRAMEWORK_LOG_LEVEL": "{{service.log_level}}",

    "NODE_COUNT": "{{node.count}}",
    "NODE_PLACEMENT": "{{node.placement_constraint}}",
    {{#service.virtual_network_enabled}}
    "ENABLE_VIRTUAL_NETWORK": "yes",
    "VIRTUAL_NETWORK_NAME": "{{service.virtual_network_name}}",
    "VIRTUAL_NETWORK_PLUGIN_LABELS": "{{service.virtual_network_plugin_labels}}",
    {{/service.virtual_network_enabled}}
    "NODE_CPUS": "{{node.cpus}}",
    "NODE_MEM": "{{node.mem}}",
    "NODE_DISK": "{{node.disk}}",
    "NODE_DISK_TYPE": "{{node.disk_type}}",


    "BROKER_URL": "{{messaging.broker-url}}",
    {{#scale.docker-credentials}}
    "CONFIG_URI": "{{scale.docker-credentials}}",
    {{/scale.docker-credentials}}
    "DB_CPU": "{{db.cpu}}",
    "DB_DOCKER_IMAGE": "{{resource.assets.container.docker.db}}",
    "DB_HOST": "{{db.db-host}}",
    "DB_MEM": "{{db.mem}}",
    "DB_NAME": "{{db.db-name}}",
    "DB_PASS": "{{db.db-pass}}",
    "DB_PORT": "{{db.db-port}}",
    "DB_USER": "{{db.db-user}}",
    "ELASTICSEARCH_URLS": "{{logging.elasticsearch-urls}}",
    "ELASTICSEARCH_LB": "{{logging.elasticsearch-lb}}",
    "LOGSTASH_ADDRESS": "{{logging.logstash-address}}",
    "LOGSTASH_CPU": "{{logging.cpu}}",
    "LOGSTASH_DOCKER_IMAGE": "{{resource.assets.container.docker.logstash}}",
    "LOGSTASH_MEM": "{{logging.mem}}",
    "RABBITMQ_CPU": "{{messaging.cpu}}",
    "RABBITMQ_DOCKER_IMAGE": "{{resource.assets.container.docker.rabbitmq}}",
    "RABBITMQ_MEM": "{{messaging.mem}}",
    "SCALE_DOCKER_IMAGE": "{{resource.assets.container.docker.scale}}",
    "SCALE_VHOST": "{{scale.virtual-host}}",
    "SCHEDULER_CPU": "{{scale.cpu}}",
    "SCHEDULER_MEM": "{{scale.mem}}",
    "WEBSERVER_CPU": "{{webserver.cpu}}",
    "WEBSERVER_MEM": "{{webserver.mem}}",


    "JAVA_URI": "{{resource.assets.uris.jre-tar-gz}}",
    "EXECUTOR_URI": "{{resource.assets.uris.executor-zip}}",
    {{#service.service_account_secret}}
    "DCOS_SERVICE_ACCOUNT_CREDENTIAL": { "secret": "serviceCredential" },
    "MESOS_MODULES": "{\"libraries\": [{\"file\": \"libdcos_security.so\", \"modules\": [{\"name\": \"com_mesosphere_dcos_ClassicRPCAuthenticatee\"}]}]}",
    "MESOS_AUTHENTICATEE": "com_mesosphere_dcos_ClassicRPCAuthenticatee",
    {{/service.service_account_secret}}
    "LIBMESOS_URI": "{{resource.assets.uris.libmesos-bundle-tar-gz}}"
  },
  "uris": [
    "{{resource.assets.uris.jre-tar-gz}}",
    "{{resource.assets.uris.scheduler-zip}}",
    "{{resource.assets.uris.libmesos-bundle-tar-gz}}"
  ],
  "upgradeStrategy":{
    "minimumHealthCapacity": 0,
    "maximumOverCapacity": 0
  },
  "healthChecks": [
    {
      "protocol": "HTTP",
      "path": "/v1/plans/deploy",
      "gracePeriodSeconds": 900,
      "intervalSeconds": 30,
      "portIndex": 0,
      "timeoutSeconds": 30,
      "maxConsecutiveFailures": 0
    },
    {
      "protocol": "HTTP",
      "path": "/v1/plans/recovery",
      "gracePeriodSeconds": 900,
      "intervalSeconds": 30,
      "portIndex": 0,
      "timeoutSeconds": 30,
      "maxConsecutiveFailures": 0
    }
  ],
  "portDefinitions": [
    {
      "port": 0,
      "protocol": "tcp",
      "name": "api",
      "labels": { "VIP_0": "/api.{{service.name}}:80" }
    }
  ]
}
